/** Autogenerated Main.cpp. */

// =================================| Include only the DSP files  |=================================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// ===========================| Now we can add the rest of the codebase |===========================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// =======================================| Project Factory |=======================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations ---------------------------------------------------------------------
		
		registerPolyNode<project::shfiter<1>, project::shfiter<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::psfine<1>, project::psfine<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::ps2<1>, project::ps2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::klp2<1>, project::klp2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::klp<1>, project::klp<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::khp2<1>, project::khp2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::khp<1>, project::khp<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::hole<1>, scriptnode::wrap::illegal_poly<project::hole<1>>>();
		registerPolyNode<project::gran<1>, scriptnode::wrap::illegal_poly<project::gran<1>>>();
		registerPolyNode<project::Comb<1>, project::Comb<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::cbmono<1>, scriptnode::wrap::illegal_poly<project::cbmono<1>>>();
		registerPolyNode<project::lfo<1>, wrap::illegal_poly<project::lfo<1>>>();
		registerPolyNode<project::osc1<1>, project::osc1<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Revern<1>, wrap::illegal_poly<project::Revern<1>>>();
	}
};
}

project::Factory f;

// ===================================| Exported DLL functions |===================================

DLL_EXPORT int getNumNodes()
{
	return f.getNumNodes();
}

DLL_EXPORT size_t getNodeId(int index, char* t)
{
	return HelperFunctions::writeString(t, f.getId(index).getCharPointer());
}

DLL_EXPORT bool isThirdPartyNode(int index)
{
	return index < 11;
}

DLL_EXPORT int getNumDataObjects(int nodeIndex, int dataTypeAsInt)
{
	return f.getNumDataObjects(nodeIndex, dataTypeAsInt);
}

DLL_EXPORT void deInitOpaqueNode(scriptnode::OpaqueNode* n)
{
	n->callDestructor();
}

DLL_EXPORT void initOpaqueNode(scriptnode::OpaqueNode* n, int index, bool polyIfPossible)
{
	f.initOpaqueNode(n, index, polyIfPossible);
}
DLL_EXPORT int getHash(int index)
{
	static const int thirdPartyOffset = 11;
	static const int hashIndexes[3] =
	{
		0,
		-1915232689,
		1769000663
	};
	return (index >= thirdPartyOffset) ? hashIndexes[index - thirdPartyOffset] : 0;
}
DLL_EXPORT int getWrapperType(int index)
{
	return f.getWrapperType(index);
}
DLL_EXPORT ErrorC getError()
{
	return f.getError();
}
DLL_EXPORT void clearError()
{
	f.clearError();
}
DLL_EXPORT int getDllVersionCounter()
{
	return scriptnode::dll::ProjectDll::DllUpdateCounter;
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


