#pragma once

// These will improve the readability of the connection definition

#define getT(Idx) template get<Idx>()
#define connectT(Idx, target) template connect<Idx>(target)
#define getParameterT(Idx) template getParameter<Idx>()
#define setParameterT(Idx, value) template setParameter<Idx>(value)
#define setParameterWT(Idx, value) template setWrapParameter<Idx>(value)
using namespace scriptnode;
using namespace snex;
using namespace snex::Types;

namespace LfoNew_impl
{
// ==============================| Node & Parameter type declarations |==============================

template <int NV>
using converter_t = control::converter<parameter::plain<fx::sampleandhold<NV>, 0>, 
                                       conversion_logic::ms2samples>;
template <int NV>
using ramp_t = wrap::no_data<core::ramp<NV, false>>;

template <int NV> using converter4_t = converter_t<NV>;

template <int NV> using converter6_t = converter_t<NV>;

template <int NV>
using tempo_sync2_mod = parameter::chain<ranges::Identity, 
                                         parameter::plain<converter_t<NV>, 0>, 
                                         parameter::plain<ramp_t<NV>, 0>, 
                                         parameter::plain<converter4_t<NV>, 0>, 
                                         parameter::plain<converter6_t<NV>, 0>>;

template <int NV>
using tempo_sync2_t = wrap::mod<tempo_sync2_mod<NV>, 
                                control::tempo_sync<NV>>;

template <int NV>
using chain32_t = container::chain<parameter::empty, 
                                   wrap::fix<1, tempo_sync2_t<NV>>, 
                                   ramp_t<NV>>;

template <int NV>
using chain_t = container::chain<parameter::empty, 
                                 wrap::fix<1, core::gain<NV>>, 
                                 math::pi<NV>>;

template <int NV>
using chain1_t = container::chain<parameter::empty, 
                                  wrap::fix<1, core::gain<NV>>, 
                                  math::fmod<NV>>;
template <int NV>
using oscillator_t = wrap::no_data<core::oscillator<NV>>;

namespace custom
{

struct expr1
{
	static float op(float input, float value)
	{
		return (1.0f - value) * input + value * Math.sin(Math.PI * 1.0 * value * input);
		;
	}
};
}

template <int NV>
using input_toggle_t = control::input_toggle<NV, 
                                             parameter::plain<math::expr<NV, custom::expr1>, 0>>;

template <int NV>
using chain2_t = container::chain<parameter::empty, 
                                  wrap::fix<1, oscillator_t<NV>>, 
                                  converter_t<NV>, 
                                  fx::sampleandhold<NV>, 
                                  input_toggle_t<NV>>;
template <int NV>
using branch_t = container::branch<parameter::empty, 
                                   wrap::fix<1, chain_t<NV>>, 
                                   chain1_t<NV>, 
                                   chain2_t<NV>>;

template <int NV>
using chain21_t = container::chain<parameter::empty, 
                                   wrap::fix<1, branch_t<NV>>, 
                                   math::expr<NV, custom::expr1>>;

template <int NV>
using chain24_t = container::chain<parameter::empty, 
                                   wrap::fix<1, core::gain<NV>>, 
                                   wrap::no_process<math::fmod<NV>>, 
                                   math::pi<NV>>;

template <int NV>
using chain132_t = container::chain<parameter::empty, 
                                    wrap::fix<1, wrap::no_process<math::pi<NV>>>, 
                                    core::gain<NV>, 
                                    math::fmod<NV>>;
template <int NV> using oscillator3_t = oscillator_t<NV>;

template <int NV>
using chain11_t = container::chain<parameter::empty, 
                                   wrap::fix<1, oscillator3_t<NV>>, 
                                   converter4_t<NV>, 
                                   fx::sampleandhold<NV>, 
                                   control::input_toggle<NV, parameter::empty>>;
template <int NV>
using branch3_t = container::branch<parameter::empty, 
                                    wrap::fix<1, chain24_t<NV>>, 
                                    chain132_t<NV>, 
                                    chain11_t<NV>>;

struct table11_t_data
{
	span<float, 512> data =
	{
		1.f, 0.997751f, 0.995502f, 0.993254f, 0.991005f, 0.988756f,
		0.986507f, 0.984259f, 0.98201f, 0.979761f, 0.977512f, 0.975263f,
		0.973015f, 0.970766f, 0.968517f, 0.966268f, 0.96402f, 0.961771f,
		0.959522f, 0.957273f, 0.955024f, 0.952776f, 0.950527f, 0.948278f,
		0.946029f, 0.943781f, 0.941532f, 0.939283f, 0.937034f, 0.934785f,
		0.932548f, 0.930341f, 0.928133f, 0.925926f, 0.923719f, 0.921511f,
		0.919304f, 0.917097f, 0.914889f, 0.912682f, 0.910474f, 0.908267f,
		0.90606f, 0.903852f, 0.901645f, 0.899438f, 0.89723f, 0.895023f,
		0.892815f, 0.890608f, 0.888401f, 0.886193f, 0.883986f, 0.881779f,
		0.879571f, 0.877364f, 0.875156f, 0.872949f, 0.870742f, 0.868534f,
		0.866338f, 0.864171f, 0.862004f, 0.859837f, 0.85767f, 0.855504f,
		0.853337f, 0.85117f, 0.849003f, 0.846836f, 0.84467f, 0.842503f,
		0.840336f, 0.838169f, 0.836003f, 0.833836f, 0.831669f, 0.829502f,
		0.827335f, 0.825169f, 0.823002f, 0.820835f, 0.818668f, 0.816501f,
		0.814335f, 0.812168f, 0.810001f, 0.807834f, 0.805668f, 0.803501f,
		0.801334f, 0.799205f, 0.797078f, 0.794951f, 0.792824f, 0.790697f,
		0.78857f, 0.786443f, 0.784316f, 0.782189f, 0.780062f, 0.777935f,
		0.775808f, 0.773681f, 0.771554f, 0.769427f, 0.7673f, 0.765173f,
		0.763047f, 0.76092f, 0.758793f, 0.756666f, 0.754539f, 0.752412f,
		0.750285f, 0.748158f, 0.746031f, 0.743904f, 0.741777f, 0.73965f,
		0.737523f, 0.735409f, 0.733321f, 0.731233f, 0.729145f, 0.727057f,
		0.72497f, 0.722882f, 0.720794f, 0.718706f, 0.716618f, 0.71453f,
		0.712442f, 0.710354f, 0.708266f, 0.706178f, 0.70409f, 0.702002f,
		0.699914f, 0.697827f, 0.695739f, 0.693651f, 0.691563f, 0.689475f,
		0.687387f, 0.685299f, 0.683211f, 0.681123f, 0.679035f, 0.676947f,
		0.674859f, 0.672771f, 0.6707f, 0.668651f, 0.666601f, 0.664551f,
		0.662502f, 0.660452f, 0.658403f, 0.656353f, 0.654303f, 0.652254f,
		0.650204f, 0.648154f, 0.646105f, 0.644055f, 0.642006f, 0.639956f,
		0.637906f, 0.635857f, 0.633807f, 0.631757f, 0.629708f, 0.627658f,
		0.625609f, 0.623559f, 0.621509f, 0.61946f, 0.61741f, 0.615361f,
		0.613311f, 0.611261f, 0.609212f, 0.607171f, 0.605159f, 0.603147f,
		0.601135f, 0.599123f, 0.597111f, 0.595099f, 0.593087f, 0.591075f,
		0.589063f, 0.587051f, 0.585039f, 0.583027f, 0.581015f, 0.579003f,
		0.576991f, 0.574979f, 0.572967f, 0.570955f, 0.568943f, 0.566931f,
		0.564919f, 0.562907f, 0.560894f, 0.558882f, 0.55687f, 0.554858f,
		0.552846f, 0.550834f, 0.548822f, 0.54681f, 0.544798f, 0.542814f,
		0.540839f, 0.538863f, 0.536888f, 0.534913f, 0.532938f, 0.530963f,
		0.528988f, 0.527013f, 0.525037f, 0.523062f, 0.521087f, 0.519112f,
		0.517137f, 0.515162f, 0.513187f, 0.511212f, 0.509236f, 0.507261f,
		0.505286f, 0.503311f, 0.501336f, 0.499361f, 0.497386f, 0.49541f,
		0.493435f, 0.49146f, 0.489485f, 0.48751f, 0.485535f, 0.48356f,
		0.481584f, 0.479644f, 0.477705f, 0.475766f, 0.473827f, 0.471888f,
		0.469949f, 0.46801f, 0.466071f, 0.464132f, 0.462194f, 0.460255f,
		0.458316f, 0.456377f, 0.454438f, 0.452499f, 0.45056f, 0.448621f,
		0.446682f, 0.444743f, 0.442804f, 0.440865f, 0.438926f, 0.436988f,
		0.435049f, 0.43311f, 0.431171f, 0.429232f, 0.427293f, 0.425354f,
		0.423415f, 0.421476f, 0.419537f, 0.417629f, 0.415726f, 0.413822f,
		0.411919f, 0.410016f, 0.408112f, 0.406209f, 0.404306f, 0.402402f,
		0.400499f, 0.398595f, 0.396692f, 0.394789f, 0.392885f, 0.390982f,
		0.389079f, 0.387175f, 0.385272f, 0.383368f, 0.381465f, 0.379562f,
		0.377658f, 0.375755f, 0.373852f, 0.371948f, 0.370045f, 0.368141f,
		0.366238f, 0.364335f, 0.362431f, 0.360528f, 0.358625f, 0.356738f,
		0.35487f, 0.353001f, 0.351133f, 0.349265f, 0.347396f, 0.345528f,
		0.343659f, 0.341791f, 0.339922f, 0.338054f, 0.336185f, 0.334317f,
		0.332448f, 0.33058f, 0.328711f, 0.326843f, 0.324974f, 0.323106f,
		0.321238f, 0.319369f, 0.317501f, 0.315632f, 0.313764f, 0.311895f,
		0.310027f, 0.308158f, 0.30629f, 0.304421f, 0.302553f, 0.300684f,
		0.298816f, 0.296947f, 0.295107f, 0.293273f, 0.291439f, 0.289604f,
		0.28777f, 0.285936f, 0.284102f, 0.282268f, 0.280433f, 0.278599f,
		0.276765f, 0.274931f, 0.273097f, 0.271262f, 0.269428f, 0.267594f,
		0.26576f, 0.263926f, 0.262092f, 0.260257f, 0.258423f, 0.256589f,
		0.254755f, 0.252921f, 0.251086f, 0.249252f, 0.247418f, 0.245584f,
		0.24375f, 0.241915f, 0.240081f, 0.238247f, 0.236413f, 0.234607f,
		0.232807f, 0.231006f, 0.229205f, 0.227405f, 0.225604f, 0.223804f,
		0.222003f, 0.220203f, 0.218402f, 0.216602f, 0.214801f, 0.213001f,
		0.2112f, 0.2094f, 0.207599f, 0.205799f, 0.203998f, 0.202198f,
		0.200397f, 0.198597f, 0.196796f, 0.194996f, 0.193195f, 0.191395f,
		0.189594f, 0.187794f, 0.185993f, 0.184193f, 0.182392f, 0.180592f,
		0.178791f, 0.176991f, 0.175209f, 0.173442f, 0.171674f, 0.169907f,
		0.168139f, 0.166372f, 0.164605f, 0.162837f, 0.16107f, 0.159302f,
		0.157535f, 0.155767f, 0.154f, 0.152232f, 0.150465f, 0.148698f,
		0.14693f, 0.145163f, 0.143395f, 0.141628f, 0.13986f, 0.138093f,
		0.136326f, 0.134558f, 0.132791f, 0.131023f, 0.129256f, 0.127488f,
		0.125721f, 0.123954f, 0.122186f, 0.120419f, 0.118651f, 0.116884f,
		0.115149f, 0.113414f, 0.111679f, 0.109945f, 0.10821f, 0.106475f,
		0.10474f, 0.103005f, 0.10127f, 0.0995349f, 0.0978f, 0.0960651f,
		0.0943302f, 0.0925952f, 0.0908603f, 0.0891254f, 0.0873904f, 0.0856555f,
		0.0839206f, 0.0821856f, 0.0804507f, 0.0787158f, 0.0769809f, 0.075246f,
		0.073511f, 0.071776f, 0.0700411f, 0.0683062f, 0.0665713f, 0.0648364f,
		0.0631015f, 0.0613666f, 0.0596315f, 0.0579016f, 0.0561985f, 0.0544956f,
		0.0527926f, 0.0510896f, 0.0493866f, 0.0476837f, 0.0459806f, 0.0442777f,
		0.0425746f, 0.0408717f, 0.0391687f, 0.0374657f, 0.0357627f, 0.0340598f,
		0.0323567f, 0.0306538f, 0.0289508f, 0.0272478f, 0.0255448f, 0.0238419f,
		0.0221388f, 0.0204359f, 0.0187328f, 0.0170299f, 0.0153269f, 0.0136239f,
		0.0119209f, 0.0102179f, 0.00851494f, 0.00681198f, 0.00510895f, 0.00340593f,
		0.00170296f, 0.f
	};
};

using table11_t = wrap::data<math::table, 
                             data::embedded::table<table11_t_data>>;

template <int NV>
using chain35_t = container::chain<parameter::empty, 
                                   wrap::fix<1, branch3_t<NV>>, 
                                   table11_t>;

template <int NV> using chain37_t = chain_t<NV>;

template <int NV> using chain133_t = chain132_t<NV>;
template <int NV> using oscillator1_t = oscillator_t<NV>;

template <int NV>
using chain12_t = container::chain<parameter::empty, 
                                   wrap::fix<1, oscillator1_t<NV>>>;
template <int NV>
using branch6_t = container::branch<parameter::empty, 
                                    wrap::fix<1, chain37_t<NV>>, 
                                    chain133_t<NV>, 
                                    chain12_t<NV>>;

template <int NV>
using chain36_t = container::chain<parameter::empty, 
                                   wrap::fix<1, branch6_t<NV>>>;

template <int NV>
using chain39_t = container::chain<parameter::empty, 
                                   wrap::fix<1, core::gain<NV>>, 
                                   wrap::no_process<math::fmod<NV>>, 
                                   math::pi<NV>, 
                                   math::rect<NV>>;

template <int NV>
using chain134_t = container::chain<parameter::empty, 
                                    wrap::fix<1, wrap::no_process<math::pi<NV>>>, 
                                    core::gain<NV>, 
                                    math::fmod<NV>, 
                                    math::rect<NV>>;
template <int NV> using oscillator2_t = oscillator_t<NV>;

template <int NV>
using chain13_t = container::chain<parameter::empty, 
                                   wrap::fix<1, oscillator2_t<NV>>, 
                                   math::rect<NV>>;
template <int NV>
using branch7_t = container::branch<parameter::empty, 
                                    wrap::fix<1, chain39_t<NV>>, 
                                    chain134_t<NV>, 
                                    chain13_t<NV>>;

template <int NV>
using chain38_t = container::chain<parameter::empty, 
                                   wrap::fix<1, branch7_t<NV>>>;

struct table6_t_data
{
	span<float, 512> data =
	{
		0.f, 0.00346178f, 0.00692362f, 0.0103854f, 0.0138472f, 0.017309f,
		0.0207708f, 0.0242326f, 0.0276944f, 0.0311562f, 0.034618f, 0.0380798f,
		0.0415416f, 0.0450034f, 0.0484653f, 0.051927f, 0.0553888f, 0.0588561f,
		0.0623772f, 0.0658983f, 0.0694194f, 0.0729405f, 0.0764617f, 0.0799828f,
		0.0835039f, 0.087025f, 0.0905461f, 0.0940672f, 0.0975884f, 0.101109f,
		0.104631f, 0.108152f, 0.111673f, 0.115194f, 0.118734f, 0.122316f,
		0.125897f, 0.129478f, 0.13306f, 0.136641f, 0.140223f, 0.143804f,
		0.147385f, 0.150967f, 0.154548f, 0.15813f, 0.161711f, 0.165292f,
		0.168874f, 0.172455f, 0.176036f, 0.179659f, 0.183302f, 0.186945f,
		0.190587f, 0.19423f, 0.197873f, 0.201515f, 0.205158f, 0.208801f,
		0.212443f, 0.216086f, 0.219729f, 0.223371f, 0.227014f, 0.230657f,
		0.234299f, 0.237953f, 0.241658f, 0.245363f, 0.249067f, 0.252772f,
		0.256477f, 0.260182f, 0.263887f, 0.267592f, 0.271297f, 0.275002f,
		0.278707f, 0.282412f, 0.286117f, 0.289822f, 0.293526f, 0.297231f,
		0.300987f, 0.304755f, 0.308524f, 0.312292f, 0.31606f, 0.319828f,
		0.323596f, 0.327365f, 0.331133f, 0.334901f, 0.338669f, 0.342438f,
		0.346206f, 0.349974f, 0.353742f, 0.35751f, 0.361315f, 0.365148f,
		0.36898f, 0.372813f, 0.376646f, 0.380478f, 0.384311f, 0.388143f,
		0.391976f, 0.395808f, 0.399641f, 0.403473f, 0.407306f, 0.411139f,
		0.414971f, 0.418804f, 0.422667f, 0.426565f, 0.430463f, 0.434361f,
		0.438259f, 0.442157f, 0.446055f, 0.449953f, 0.453851f, 0.457749f,
		0.461647f, 0.465545f, 0.469443f, 0.473341f, 0.477239f, 0.481137f,
		0.485069f, 0.489033f, 0.492998f, 0.496962f, 0.500927f, 0.504891f,
		0.508856f, 0.51282f, 0.516785f, 0.52075f, 0.524714f, 0.528679f,
		0.532643f, 0.536608f, 0.540572f, 0.544537f, 0.548547f, 0.552579f,
		0.556611f, 0.560644f, 0.564676f, 0.568708f, 0.57274f, 0.576773f,
		0.580805f, 0.584837f, 0.588869f, 0.592902f, 0.596934f, 0.600966f,
		0.604998f, 0.609031f, 0.61313f, 0.617231f, 0.621332f, 0.625433f,
		0.629534f, 0.633636f, 0.637737f, 0.641838f, 0.645939f, 0.65004f,
		0.654141f, 0.658242f, 0.662343f, 0.666444f, 0.670546f, 0.674676f,
		0.678847f, 0.683018f, 0.687189f, 0.69136f, 0.695531f, 0.699703f,
		0.703874f, 0.708045f, 0.712216f, 0.716387f, 0.720559f, 0.72473f,
		0.728901f, 0.733072f, 0.737243f, 0.741485f, 0.745727f, 0.74997f,
		0.754212f, 0.758455f, 0.762697f, 0.766939f, 0.771182f, 0.775424f,
		0.779667f, 0.783909f, 0.788152f, 0.792394f, 0.796637f, 0.800879f,
		0.805172f, 0.809487f, 0.813802f, 0.818117f, 0.822432f, 0.826747f,
		0.831062f, 0.835377f, 0.839692f, 0.844007f, 0.848322f, 0.852637f,
		0.856952f, 0.861268f, 0.865583f, 0.869937f, 0.874326f, 0.878715f,
		0.883104f, 0.887493f, 0.891882f, 0.89627f, 0.900659f, 0.905048f,
		0.909437f, 0.913826f, 0.918215f, 0.922604f, 0.926993f, 0.931382f,
		0.935809f, 0.940273f, 0.944737f, 0.949201f, 0.953665f, 0.958129f,
		0.962594f, 0.967058f, 0.971522f, 0.975986f, 0.98045f, 0.984914f,
		0.989378f, 0.993842f, 0.998306f, 0.997366f, 0.993121f, 0.988877f,
		0.984632f, 0.980388f, 0.976143f, 0.971898f, 0.967654f, 0.963409f,
		0.959165f, 0.95492f, 0.950675f, 0.946431f, 0.942186f, 0.937942f,
		0.933697f, 0.929453f, 0.925208f, 0.920963f, 0.916719f, 0.912474f,
		0.90823f, 0.903985f, 0.899741f, 0.895496f, 0.891251f, 0.887007f,
		0.882762f, 0.878518f, 0.874273f, 0.870028f, 0.865878f, 0.861735f,
		0.857593f, 0.853451f, 0.849309f, 0.845167f, 0.841025f, 0.836883f,
		0.832741f, 0.828599f, 0.824457f, 0.820315f, 0.816173f, 0.812031f,
		0.807888f, 0.803746f, 0.799604f, 0.795462f, 0.79132f, 0.787178f,
		0.783036f, 0.778894f, 0.774752f, 0.77061f, 0.766468f, 0.762325f,
		0.758183f, 0.754041f, 0.749899f, 0.745757f, 0.741615f, 0.737554f,
		0.733512f, 0.72947f, 0.725428f, 0.721386f, 0.717344f, 0.713302f,
		0.709259f, 0.705217f, 0.701175f, 0.697133f, 0.693091f, 0.689049f,
		0.685007f, 0.680964f, 0.676922f, 0.67288f, 0.668838f, 0.664796f,
		0.660754f, 0.656712f, 0.652669f, 0.648627f, 0.644585f, 0.640543f,
		0.636501f, 0.632459f, 0.628417f, 0.624374f, 0.620332f, 0.61629f,
		0.612279f, 0.608335f, 0.60439f, 0.600446f, 0.596501f, 0.592556f,
		0.588612f, 0.584667f, 0.580722f, 0.576778f, 0.572833f, 0.568888f,
		0.564944f, 0.560999f, 0.557054f, 0.55311f, 0.549165f, 0.54522f,
		0.541276f, 0.537331f, 0.533386f, 0.529442f, 0.525497f, 0.521553f,
		0.517608f, 0.513663f, 0.509718f, 0.505774f, 0.501829f, 0.497885f,
		0.49394f, 0.489995f, 0.486093f, 0.482243f, 0.478394f, 0.474544f,
		0.470695f, 0.466845f, 0.462995f, 0.459146f, 0.455296f, 0.451447f,
		0.447597f, 0.443748f, 0.439898f, 0.436049f, 0.432199f, 0.42835f,
		0.4245f, 0.420651f, 0.416801f, 0.412952f, 0.409102f, 0.405252f,
		0.401403f, 0.397553f, 0.393704f, 0.389854f, 0.386005f, 0.382155f,
		0.378306f, 0.374456f, 0.370607f, 0.366757f, 0.362923f, 0.359167f,
		0.35541f, 0.351653f, 0.347897f, 0.34414f, 0.340383f, 0.336627f,
		0.33287f, 0.329113f, 0.325356f, 0.3216f, 0.317843f, 0.314086f,
		0.31033f, 0.306573f, 0.302816f, 0.29906f, 0.295303f, 0.291546f,
		0.28779f, 0.284033f, 0.280276f, 0.27652f, 0.272763f, 0.269006f,
		0.265249f, 0.261493f, 0.257736f, 0.253979f, 0.250223f, 0.246466f,
		0.242709f, 0.238998f, 0.235332f, 0.231666f, 0.228f, 0.224334f,
		0.220668f, 0.217002f, 0.213336f, 0.20967f, 0.206004f, 0.202338f,
		0.198672f, 0.195006f, 0.19134f, 0.187674f, 0.184008f, 0.180342f,
		0.176675f, 0.17301f, 0.169343f, 0.165677f, 0.162011f, 0.158345f,
		0.154679f, 0.151013f, 0.147347f, 0.143681f, 0.140015f, 0.136349f,
		0.132683f, 0.129017f, 0.125351f, 0.121685f, 0.118058f, 0.114481f,
		0.110903f, 0.107326f, 0.103748f, 0.100171f, 0.0965932f, 0.0930157f,
		0.0894382f, 0.0858607f, 0.0822831f, 0.0787056f, 0.0751281f, 0.0715506f,
		0.067973f, 0.0643955f, 0.060818f, 0.0572404f, 0.0536629f, 0.0500854f,
		0.0465079f, 0.0429304f, 0.0393528f, 0.0357752f, 0.0321977f, 0.0286202f,
		0.0250427f, 0.0214652f, 0.0178877f, 0.0143102f, 0.0107325f, 0.007155f,
		0.00357753f, 0.f
	};
};

using table6_t = wrap::data<math::table, 
                            data::embedded::table<table6_t_data>>;

template <int NV>
using chain41_t = container::chain<parameter::empty, 
                                   wrap::fix<1, core::gain<NV>>, 
                                   wrap::no_process<math::fmod<NV>>, 
                                   math::pi<NV>, 
                                   table6_t>;

struct table10_t_data
{
	span<float, 512> data =
	{
		0.f, 0.00346178f, 0.00692362f, 0.0103854f, 0.0138472f, 0.017309f,
		0.0207708f, 0.0242326f, 0.0276944f, 0.0311562f, 0.034618f, 0.0380798f,
		0.0415416f, 0.0450034f, 0.0484653f, 0.051927f, 0.0553888f, 0.0588561f,
		0.0623772f, 0.0658983f, 0.0694194f, 0.0729405f, 0.0764617f, 0.0799828f,
		0.0835039f, 0.087025f, 0.0905461f, 0.0940672f, 0.0975884f, 0.101109f,
		0.104631f, 0.108152f, 0.111673f, 0.115194f, 0.118734f, 0.122316f,
		0.125897f, 0.129478f, 0.13306f, 0.136641f, 0.140223f, 0.143804f,
		0.147385f, 0.150967f, 0.154548f, 0.15813f, 0.161711f, 0.165292f,
		0.168874f, 0.172455f, 0.176036f, 0.179659f, 0.183302f, 0.186945f,
		0.190587f, 0.19423f, 0.197873f, 0.201515f, 0.205158f, 0.208801f,
		0.212443f, 0.216086f, 0.219729f, 0.223371f, 0.227014f, 0.230657f,
		0.234299f, 0.237953f, 0.241658f, 0.245363f, 0.249067f, 0.252772f,
		0.256477f, 0.260182f, 0.263887f, 0.267592f, 0.271297f, 0.275002f,
		0.278707f, 0.282412f, 0.286117f, 0.289822f, 0.293526f, 0.297231f,
		0.300987f, 0.304755f, 0.308524f, 0.312292f, 0.31606f, 0.319828f,
		0.323596f, 0.327365f, 0.331133f, 0.334901f, 0.338669f, 0.342438f,
		0.346206f, 0.349974f, 0.353742f, 0.35751f, 0.361315f, 0.365148f,
		0.36898f, 0.372813f, 0.376646f, 0.380478f, 0.384311f, 0.388143f,
		0.391976f, 0.395808f, 0.399641f, 0.403473f, 0.407306f, 0.411139f,
		0.414971f, 0.418804f, 0.422667f, 0.426565f, 0.430463f, 0.434361f,
		0.438259f, 0.442157f, 0.446055f, 0.449953f, 0.453851f, 0.457749f,
		0.461647f, 0.465545f, 0.469443f, 0.473341f, 0.477239f, 0.481137f,
		0.485069f, 0.489033f, 0.492998f, 0.496962f, 0.500927f, 0.504891f,
		0.508856f, 0.51282f, 0.516785f, 0.52075f, 0.524714f, 0.528679f,
		0.532643f, 0.536608f, 0.540572f, 0.544537f, 0.548547f, 0.552579f,
		0.556611f, 0.560644f, 0.564676f, 0.568708f, 0.57274f, 0.576773f,
		0.580805f, 0.584837f, 0.588869f, 0.592902f, 0.596934f, 0.600966f,
		0.604998f, 0.609031f, 0.61313f, 0.617231f, 0.621332f, 0.625433f,
		0.629534f, 0.633636f, 0.637737f, 0.641838f, 0.645939f, 0.65004f,
		0.654141f, 0.658242f, 0.662343f, 0.666444f, 0.670546f, 0.674676f,
		0.678847f, 0.683018f, 0.687189f, 0.69136f, 0.695531f, 0.699703f,
		0.703874f, 0.708045f, 0.712216f, 0.716387f, 0.720559f, 0.72473f,
		0.728901f, 0.733072f, 0.737243f, 0.741485f, 0.745727f, 0.74997f,
		0.754212f, 0.758455f, 0.762697f, 0.766939f, 0.771182f, 0.775424f,
		0.779667f, 0.783909f, 0.788152f, 0.792394f, 0.796637f, 0.800879f,
		0.805172f, 0.809487f, 0.813802f, 0.818117f, 0.822432f, 0.826747f,
		0.831062f, 0.835377f, 0.839692f, 0.844007f, 0.848322f, 0.852637f,
		0.856952f, 0.861268f, 0.865583f, 0.869937f, 0.874326f, 0.878715f,
		0.883104f, 0.887493f, 0.891882f, 0.89627f, 0.900659f, 0.905048f,
		0.909437f, 0.913826f, 0.918215f, 0.922604f, 0.926993f, 0.931382f,
		0.935809f, 0.940273f, 0.944737f, 0.949201f, 0.953665f, 0.958129f,
		0.962594f, 0.967058f, 0.971522f, 0.975986f, 0.98045f, 0.984914f,
		0.989378f, 0.993842f, 0.998306f, 0.997366f, 0.993121f, 0.988877f,
		0.984632f, 0.980388f, 0.976143f, 0.971898f, 0.967654f, 0.963409f,
		0.959165f, 0.95492f, 0.950675f, 0.946431f, 0.942186f, 0.937942f,
		0.933697f, 0.929453f, 0.925208f, 0.920963f, 0.916719f, 0.912474f,
		0.90823f, 0.903985f, 0.899741f, 0.895496f, 0.891251f, 0.887007f,
		0.882762f, 0.878518f, 0.874273f, 0.870028f, 0.865878f, 0.861735f,
		0.857593f, 0.853451f, 0.849309f, 0.845167f, 0.841025f, 0.836883f,
		0.832741f, 0.828599f, 0.824457f, 0.820315f, 0.816173f, 0.812031f,
		0.807888f, 0.803746f, 0.799604f, 0.795462f, 0.79132f, 0.787178f,
		0.783036f, 0.778894f, 0.774752f, 0.77061f, 0.766468f, 0.762325f,
		0.758183f, 0.754041f, 0.749899f, 0.745757f, 0.741615f, 0.737554f,
		0.733512f, 0.72947f, 0.725428f, 0.721386f, 0.717344f, 0.713302f,
		0.709259f, 0.705217f, 0.701175f, 0.697133f, 0.693091f, 0.689049f,
		0.685007f, 0.680964f, 0.676922f, 0.67288f, 0.668838f, 0.664796f,
		0.660754f, 0.656712f, 0.652669f, 0.648627f, 0.644585f, 0.640543f,
		0.636501f, 0.632459f, 0.628417f, 0.624374f, 0.620332f, 0.61629f,
		0.612279f, 0.608335f, 0.60439f, 0.600446f, 0.596501f, 0.592556f,
		0.588612f, 0.584667f, 0.580722f, 0.576778f, 0.572833f, 0.568888f,
		0.564944f, 0.560999f, 0.557054f, 0.55311f, 0.549165f, 0.54522f,
		0.541276f, 0.537331f, 0.533386f, 0.529442f, 0.525497f, 0.521553f,
		0.517608f, 0.513663f, 0.509718f, 0.505774f, 0.501829f, 0.497885f,
		0.49394f, 0.489995f, 0.486093f, 0.482243f, 0.478394f, 0.474544f,
		0.470695f, 0.466845f, 0.462995f, 0.459146f, 0.455296f, 0.451447f,
		0.447597f, 0.443748f, 0.439898f, 0.436049f, 0.432199f, 0.42835f,
		0.4245f, 0.420651f, 0.416801f, 0.412952f, 0.409102f, 0.405252f,
		0.401403f, 0.397553f, 0.393704f, 0.389854f, 0.386005f, 0.382155f,
		0.378306f, 0.374456f, 0.370607f, 0.366757f, 0.362923f, 0.359167f,
		0.35541f, 0.351653f, 0.347897f, 0.34414f, 0.340383f, 0.336627f,
		0.33287f, 0.329113f, 0.325356f, 0.3216f, 0.317843f, 0.314086f,
		0.31033f, 0.306573f, 0.302816f, 0.29906f, 0.295303f, 0.291546f,
		0.28779f, 0.284033f, 0.280276f, 0.27652f, 0.272763f, 0.269006f,
		0.265249f, 0.261493f, 0.257736f, 0.253979f, 0.250223f, 0.246466f,
		0.242709f, 0.238998f, 0.235332f, 0.231666f, 0.228f, 0.224334f,
		0.220668f, 0.217002f, 0.213336f, 0.20967f, 0.206004f, 0.202338f,
		0.198672f, 0.195006f, 0.19134f, 0.187674f, 0.184008f, 0.180342f,
		0.176675f, 0.17301f, 0.169343f, 0.165677f, 0.162011f, 0.158345f,
		0.154679f, 0.151013f, 0.147347f, 0.143681f, 0.140015f, 0.136349f,
		0.132683f, 0.129017f, 0.125351f, 0.121685f, 0.118058f, 0.114481f,
		0.110903f, 0.107326f, 0.103748f, 0.100171f, 0.0965932f, 0.0930157f,
		0.0894382f, 0.0858607f, 0.0822831f, 0.0787056f, 0.0751281f, 0.0715506f,
		0.067973f, 0.0643955f, 0.060818f, 0.0572404f, 0.0536629f, 0.0500854f,
		0.0465079f, 0.0429304f, 0.0393528f, 0.0357752f, 0.0321977f, 0.0286202f,
		0.0250427f, 0.0214652f, 0.0178877f, 0.0143102f, 0.0107325f, 0.007155f,
		0.00357753f, 0.f
	};
};

using table10_t = wrap::data<math::table, 
                             data::embedded::table<table10_t_data>>;

template <int NV>
using chain135_t = container::chain<parameter::empty, 
                                    wrap::fix<1, wrap::no_process<math::pi<NV>>>, 
                                    core::gain<NV>, 
                                    math::fmod<NV>, 
                                    table10_t>;
template <int NV> using oscillator5_t = oscillator_t<NV>;

struct table13_t_data
{
	span<float, 512> data =
	{
		0.f, 0.00346178f, 0.00692362f, 0.0103854f, 0.0138472f, 0.017309f,
		0.0207708f, 0.0242326f, 0.0276944f, 0.0311562f, 0.034618f, 0.0380798f,
		0.0415416f, 0.0450034f, 0.0484653f, 0.051927f, 0.0553888f, 0.0588561f,
		0.0623772f, 0.0658983f, 0.0694194f, 0.0729405f, 0.0764617f, 0.0799828f,
		0.0835039f, 0.087025f, 0.0905461f, 0.0940672f, 0.0975884f, 0.101109f,
		0.104631f, 0.108152f, 0.111673f, 0.115194f, 0.118734f, 0.122316f,
		0.125897f, 0.129478f, 0.13306f, 0.136641f, 0.140223f, 0.143804f,
		0.147385f, 0.150967f, 0.154548f, 0.15813f, 0.161711f, 0.165292f,
		0.168874f, 0.172455f, 0.176036f, 0.179659f, 0.183302f, 0.186945f,
		0.190587f, 0.19423f, 0.197873f, 0.201515f, 0.205158f, 0.208801f,
		0.212443f, 0.216086f, 0.219729f, 0.223371f, 0.227014f, 0.230657f,
		0.234299f, 0.237953f, 0.241658f, 0.245363f, 0.249067f, 0.252772f,
		0.256477f, 0.260182f, 0.263887f, 0.267592f, 0.271297f, 0.275002f,
		0.278707f, 0.282412f, 0.286117f, 0.289822f, 0.293526f, 0.297231f,
		0.300987f, 0.304755f, 0.308524f, 0.312292f, 0.31606f, 0.319828f,
		0.323596f, 0.327365f, 0.331133f, 0.334901f, 0.338669f, 0.342438f,
		0.346206f, 0.349974f, 0.353742f, 0.35751f, 0.361315f, 0.365148f,
		0.36898f, 0.372813f, 0.376646f, 0.380478f, 0.384311f, 0.388143f,
		0.391976f, 0.395808f, 0.399641f, 0.403473f, 0.407306f, 0.411139f,
		0.414971f, 0.418804f, 0.422667f, 0.426565f, 0.430463f, 0.434361f,
		0.438259f, 0.442157f, 0.446055f, 0.449953f, 0.453851f, 0.457749f,
		0.461647f, 0.465545f, 0.469443f, 0.473341f, 0.477239f, 0.481137f,
		0.485069f, 0.489033f, 0.492998f, 0.496962f, 0.500927f, 0.504891f,
		0.508856f, 0.51282f, 0.516785f, 0.52075f, 0.524714f, 0.528679f,
		0.532643f, 0.536608f, 0.540572f, 0.544537f, 0.548547f, 0.552579f,
		0.556611f, 0.560644f, 0.564676f, 0.568708f, 0.57274f, 0.576773f,
		0.580805f, 0.584837f, 0.588869f, 0.592902f, 0.596934f, 0.600966f,
		0.604998f, 0.609031f, 0.61313f, 0.617231f, 0.621332f, 0.625433f,
		0.629534f, 0.633636f, 0.637737f, 0.641838f, 0.645939f, 0.65004f,
		0.654141f, 0.658242f, 0.662343f, 0.666444f, 0.670546f, 0.674676f,
		0.678847f, 0.683018f, 0.687189f, 0.69136f, 0.695531f, 0.699703f,
		0.703874f, 0.708045f, 0.712216f, 0.716387f, 0.720559f, 0.72473f,
		0.728901f, 0.733072f, 0.737243f, 0.741485f, 0.745727f, 0.74997f,
		0.754212f, 0.758455f, 0.762697f, 0.766939f, 0.771182f, 0.775424f,
		0.779667f, 0.783909f, 0.788152f, 0.792394f, 0.796637f, 0.800879f,
		0.805172f, 0.809487f, 0.813802f, 0.818117f, 0.822432f, 0.826747f,
		0.831062f, 0.835377f, 0.839692f, 0.844007f, 0.848322f, 0.852637f,
		0.856952f, 0.861268f, 0.865583f, 0.869937f, 0.874326f, 0.878715f,
		0.883104f, 0.887493f, 0.891882f, 0.89627f, 0.900659f, 0.905048f,
		0.909437f, 0.913826f, 0.918215f, 0.922604f, 0.926993f, 0.931382f,
		0.935809f, 0.940273f, 0.944737f, 0.949201f, 0.953665f, 0.958129f,
		0.962594f, 0.967058f, 0.971522f, 0.975986f, 0.98045f, 0.984914f,
		0.989378f, 0.993842f, 0.998306f, 0.997366f, 0.993121f, 0.988877f,
		0.984632f, 0.980388f, 0.976143f, 0.971898f, 0.967654f, 0.963409f,
		0.959165f, 0.95492f, 0.950675f, 0.946431f, 0.942186f, 0.937942f,
		0.933697f, 0.929453f, 0.925208f, 0.920963f, 0.916719f, 0.912474f,
		0.90823f, 0.903985f, 0.899741f, 0.895496f, 0.891251f, 0.887007f,
		0.882762f, 0.878518f, 0.874273f, 0.870028f, 0.865878f, 0.861735f,
		0.857593f, 0.853451f, 0.849309f, 0.845167f, 0.841025f, 0.836883f,
		0.832741f, 0.828599f, 0.824457f, 0.820315f, 0.816173f, 0.812031f,
		0.807888f, 0.803746f, 0.799604f, 0.795462f, 0.79132f, 0.787178f,
		0.783036f, 0.778894f, 0.774752f, 0.77061f, 0.766468f, 0.762325f,
		0.758183f, 0.754041f, 0.749899f, 0.745757f, 0.741615f, 0.737554f,
		0.733512f, 0.72947f, 0.725428f, 0.721386f, 0.717344f, 0.713302f,
		0.709259f, 0.705217f, 0.701175f, 0.697133f, 0.693091f, 0.689049f,
		0.685007f, 0.680964f, 0.676922f, 0.67288f, 0.668838f, 0.664796f,
		0.660754f, 0.656712f, 0.652669f, 0.648627f, 0.644585f, 0.640543f,
		0.636501f, 0.632459f, 0.628417f, 0.624374f, 0.620332f, 0.61629f,
		0.612279f, 0.608335f, 0.60439f, 0.600446f, 0.596501f, 0.592556f,
		0.588612f, 0.584667f, 0.580722f, 0.576778f, 0.572833f, 0.568888f,
		0.564944f, 0.560999f, 0.557054f, 0.55311f, 0.549165f, 0.54522f,
		0.541276f, 0.537331f, 0.533386f, 0.529442f, 0.525497f, 0.521553f,
		0.517608f, 0.513663f, 0.509718f, 0.505774f, 0.501829f, 0.497885f,
		0.49394f, 0.489995f, 0.486093f, 0.482243f, 0.478394f, 0.474544f,
		0.470695f, 0.466845f, 0.462995f, 0.459146f, 0.455296f, 0.451447f,
		0.447597f, 0.443748f, 0.439898f, 0.436049f, 0.432199f, 0.42835f,
		0.4245f, 0.420651f, 0.416801f, 0.412952f, 0.409102f, 0.405252f,
		0.401403f, 0.397553f, 0.393704f, 0.389854f, 0.386005f, 0.382155f,
		0.378306f, 0.374456f, 0.370607f, 0.366757f, 0.362923f, 0.359167f,
		0.35541f, 0.351653f, 0.347897f, 0.34414f, 0.340383f, 0.336627f,
		0.33287f, 0.329113f, 0.325356f, 0.3216f, 0.317843f, 0.314086f,
		0.31033f, 0.306573f, 0.302816f, 0.29906f, 0.295303f, 0.291546f,
		0.28779f, 0.284033f, 0.280276f, 0.27652f, 0.272763f, 0.269006f,
		0.265249f, 0.261493f, 0.257736f, 0.253979f, 0.250223f, 0.246466f,
		0.242709f, 0.238998f, 0.235332f, 0.231666f, 0.228f, 0.224334f,
		0.220668f, 0.217002f, 0.213336f, 0.20967f, 0.206004f, 0.202338f,
		0.198672f, 0.195006f, 0.19134f, 0.187674f, 0.184008f, 0.180342f,
		0.176675f, 0.17301f, 0.169343f, 0.165677f, 0.162011f, 0.158345f,
		0.154679f, 0.151013f, 0.147347f, 0.143681f, 0.140015f, 0.136349f,
		0.132683f, 0.129017f, 0.125351f, 0.121685f, 0.118058f, 0.114481f,
		0.110903f, 0.107326f, 0.103748f, 0.100171f, 0.0965932f, 0.0930157f,
		0.0894382f, 0.0858607f, 0.0822831f, 0.0787056f, 0.0751281f, 0.0715506f,
		0.067973f, 0.0643955f, 0.060818f, 0.0572404f, 0.0536629f, 0.0500854f,
		0.0465079f, 0.0429304f, 0.0393528f, 0.0357752f, 0.0321977f, 0.0286202f,
		0.0250427f, 0.0214652f, 0.0178877f, 0.0143102f, 0.0107325f, 0.007155f,
		0.00357753f, 0.f
	};
};

using table13_t = wrap::data<math::table, 
                             data::embedded::table<table13_t_data>>;

template <int NV>
using chain15_t = container::chain<parameter::empty, 
                                   wrap::fix<1, oscillator5_t<NV>>, 
                                   converter6_t<NV>, 
                                   fx::sampleandhold<NV>, 
                                   control::input_toggle<NV, parameter::empty>, 
                                   core::smoother<NV>, 
                                   table13_t>;

template <int NV>
using chain14_t = container::chain<parameter::empty, 
                                   wrap::fix<1, chain15_t<NV>>>;
template <int NV>
using branch8_t = container::branch<parameter::empty, 
                                    wrap::fix<1, chain41_t<NV>>, 
                                    chain135_t<NV>, 
                                    chain14_t<NV>>;

template <int NV>
using chain40_t = container::chain<parameter::empty, 
                                   wrap::fix<1, branch8_t<NV>>>;
using table14_t = wrap::data<math::table, 
                             data::external::table<1>>;

template <int NV>
using chain43_t = container::chain<parameter::empty, 
                                   wrap::fix<1, core::gain<NV>>, 
                                   wrap::no_process<math::fmod<NV>>, 
                                   math::pi<NV>, 
                                   table14_t>;
using table15_t = table14_t;

template <int NV>
using chain136_t = container::chain<parameter::empty, 
                                    wrap::fix<1, wrap::no_process<math::pi<NV>>>, 
                                    core::gain<NV>, 
                                    math::fmod<NV>, 
                                    table15_t>;
template <int NV> using oscillator4_t = oscillator_t<NV>;
using table16_t = table14_t;

template <int NV>
using chain17_t = container::chain<parameter::empty, 
                                   wrap::fix<1, oscillator4_t<NV>>, 
                                   filters::one_pole<NV>, 
                                   table16_t>;

template <int NV>
using chain16_t = container::chain<parameter::empty, 
                                   wrap::fix<1, chain17_t<NV>>>;
template <int NV>
using branch9_t = container::branch<parameter::empty, 
                                    wrap::fix<1, chain43_t<NV>>, 
                                    chain136_t<NV>, 
                                    chain16_t<NV>>;

template <int NV>
using chain42_t = container::chain<parameter::empty, 
                                   wrap::fix<1, branch9_t<NV>>>;
template <int NV>
using branch4_t = container::branch<parameter::empty, 
                                    wrap::fix<1, chain21_t<NV>>, 
                                    chain35_t<NV>, 
                                    chain36_t<NV>, 
                                    chain38_t<NV>, 
                                    chain40_t<NV>, 
                                    chain42_t<NV>>;

template <int NV>
using chain18_t = container::chain<parameter::empty, 
                                   wrap::fix<1, chain32_t<NV>>, 
                                   branch4_t<NV>>;
using peak_t = wrap::data<core::peak, 
                          data::external::displaybuffer<0>>;

namespace LfoNew_t_parameters
{
// Parameter list for LfoNew_impl::LfoNew_t --------------------------------------------------------

DECLARE_PARAMETER_RANGE_STEP(Shape_InputRange, 
                             1., 
                             6., 
                             1.);
DECLARE_PARAMETER_RANGE_STEP(Shape_0Range, 
                             0., 
                             5., 
                             1.);

template <int NV>
using Shape_0 = parameter::from0To1<LfoNew_impl::branch4_t<NV>, 
                                    0, 
                                    Shape_0Range>;

template <int NV>
using Shape = parameter::chain<Shape_InputRange, Shape_0<NV>>;

DECLARE_PARAMETER_RANGE_STEP(Adjust_0Range, 
                             0., 
                             24., 
                             0.1);

template <int NV>
using Adjust_0 = parameter::from0To1<core::gain<NV>, 
                                     0, 
                                     Adjust_0Range>;

template <int NV> using Adjust_1 = Adjust_0<NV>;

DECLARE_PARAMETER_RANGE_STEP(Adjust_3Range, 
                             0., 
                             36., 
                             0.1);

template <int NV>
using Adjust_3 = parameter::from0To1<core::gain<NV>, 
                                     0, 
                                     Adjust_3Range>;

template <int NV> using Adjust_4 = Adjust_3<NV>;

template <int NV> using Adjust_6 = Adjust_3<NV>;

template <int NV> using Adjust_7 = Adjust_3<NV>;

template <int NV> using Adjust_8 = Adjust_3<NV>;

template <int NV> using Adjust_9 = Adjust_3<NV>;

template <int NV> using Adjust_10 = Adjust_3<NV>;

template <int NV> using Adjust_11 = Adjust_3<NV>;

DECLARE_PARAMETER_RANGE_SKEW(Adjust_12Range, 
                             0., 
                             2000., 
                             0.231378);

template <int NV>
using Adjust_12 = parameter::from0To1<core::smoother<NV>, 
                                      0, 
                                      Adjust_12Range>;

template <int NV> using Adjust_13 = Adjust_3<NV>;

template <int NV> using Adjust_14 = Adjust_3<NV>;

DECLARE_PARAMETER_RANGE_SKEW(Adjust_17Range, 
                             20., 
                             20000., 
                             0.229905);

template <int NV>
using Adjust_17 = parameter::from0To1<filters::one_pole<NV>, 
                                      0, 
                                      Adjust_17Range>;

template <int NV>
using Adjust = parameter::chain<ranges::Identity, 
                                Adjust_0<NV>, 
                                Adjust_1<NV>, 
                                parameter::plain<LfoNew_impl::input_toggle_t<NV>, 2>, 
                                Adjust_3<NV>, 
                                Adjust_4<NV>, 
                                parameter::plain<LfoNew_impl::oscillator3_t<NV>, 5>, 
                                Adjust_6<NV>, 
                                Adjust_7<NV>, 
                                Adjust_8<NV>, 
                                Adjust_9<NV>, 
                                Adjust_10<NV>, 
                                Adjust_11<NV>, 
                                Adjust_12<NV>, 
                                Adjust_13<NV>, 
                                Adjust_14<NV>, 
                                parameter::plain<LfoNew_impl::oscillator1_t<NV>, 5>, 
                                parameter::plain<LfoNew_impl::oscillator2_t<NV>, 5>, 
                                Adjust_17<NV>>;

DECLARE_PARAMETER_RANGE_STEP(AdjMode_InputRange, 
                             1., 
                             3., 
                             1.);
DECLARE_PARAMETER_RANGE_STEP(AdjMode_0Range, 
                             0., 
                             2., 
                             1.);

template <int NV>
using AdjMode_0 = parameter::from0To1<LfoNew_impl::branch_t<NV>, 
                                      0, 
                                      AdjMode_0Range>;

template <int NV>
using AdjMode_1 = parameter::from0To1<LfoNew_impl::branch3_t<NV>, 
                                      0, 
                                      AdjMode_0Range>;

template <int NV>
using AdjMode_2 = parameter::from0To1<LfoNew_impl::branch6_t<NV>, 
                                      0, 
                                      AdjMode_0Range>;

template <int NV>
using AdjMode_3 = parameter::from0To1<LfoNew_impl::branch7_t<NV>, 
                                      0, 
                                      AdjMode_0Range>;

template <int NV>
using AdjMode_4 = parameter::from0To1<LfoNew_impl::branch8_t<NV>, 
                                      0, 
                                      AdjMode_0Range>;

template <int NV>
using AdjMode_5 = parameter::from0To1<LfoNew_impl::branch9_t<NV>, 
                                      0, 
                                      AdjMode_0Range>;

template <int NV>
using AdjMode = parameter::chain<AdjMode_InputRange, 
                                 AdjMode_0<NV>, 
                                 AdjMode_1<NV>, 
                                 AdjMode_2<NV>, 
                                 AdjMode_3<NV>, 
                                 AdjMode_4<NV>, 
                                 AdjMode_5<NV>>;

template <int NV>
using Tempo = parameter::plain<LfoNew_impl::tempo_sync2_t<NV>, 
                               0>;
template <int NV>
using Divide = parameter::plain<LfoNew_impl::tempo_sync2_t<NV>, 
                                1>;
template <int NV>
using LfoNew_t_plist = parameter::list<Tempo<NV>, 
                                       Divide<NV>, 
                                       Shape<NV>, 
                                       Adjust<NV>, 
                                       AdjMode<NV>>;
}

template <int NV>
using LfoNew_t_ = container::chain<LfoNew_t_parameters::LfoNew_t_plist<NV>, 
                                   wrap::fix<1, chain18_t<NV>>, 
                                   peak_t>;

// =================================| Root node initialiser class |=================================

template <int NV> struct instance: public LfoNew_impl::LfoNew_t_<NV>
{
	
	struct metadata
	{
		static const int NumTables = 2;
		static const int NumSliderPacks = 0;
		static const int NumAudioFiles = 0;
		static const int NumFilters = 0;
		static const int NumDisplayBuffers = 1;
		
		SNEX_METADATA_ID(LfoNew);
		SNEX_METADATA_NUM_CHANNELS(1);
		SNEX_METADATA_ENCODED_PARAMETERS(84)
		{
			0x005C, 0x0000, 0x0000, 0x6554, 0x706D, 0x006F, 0x0000, 0x0000, 
            0x0000, 0x4190, 0x0000, 0x4100, 0x0000, 0x3F80, 0x0000, 0x3F80, 
            0x005C, 0x0001, 0x0000, 0x6944, 0x6976, 0x6564, 0x0000, 0x8000, 
            0x003F, 0x0000, 0x0042, 0x8000, 0x003F, 0x8000, 0x003F, 0x8000, 
            0x5C3F, 0x0200, 0x0000, 0x5300, 0x6168, 0x6570, 0x0000, 0x8000, 
            0x003F, 0xC000, 0x0040, 0x8000, 0x003F, 0x8000, 0x003F, 0x8000, 
            0x5C3F, 0x0300, 0x0000, 0x4100, 0x6A64, 0x7375, 0x0074, 0x0000, 
            0x0000, 0x0000, 0x3F80, 0x7160, 0x3EF8, 0x0000, 0x3F80, 0x0000, 
            0x0000, 0x005C, 0x0004, 0x0000, 0x6441, 0x4D6A, 0x646F, 0x0065, 
            0x0000, 0x3F80, 0x0000, 0x4040, 0x0000, 0x4040, 0x0000, 0x3F80, 
            0x0000, 0x3F80, 0x0000, 0x0000
		};
		SNEX_METADATA_ENCODED_MOD_INFO(17)
		{
			0x003A, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
            0x0000
		};
	};
	
	instance()
	{
		// Node References -------------------------------------------------------------------------
		
		auto& chain18 = this->getT(0);                                                        // LfoNew_impl::chain18_t<NV>
		auto& chain32 = this->getT(0).getT(0);                                                // LfoNew_impl::chain32_t<NV>
		auto& tempo_sync2 = this->getT(0).getT(0).getT(0);                                    // LfoNew_impl::tempo_sync2_t<NV>
		auto& ramp = this->getT(0).getT(0).getT(1);                                           // LfoNew_impl::ramp_t<NV>
		auto& branch4 = this->getT(0).getT(1);                                                // LfoNew_impl::branch4_t<NV>
		auto& chain21 = this->getT(0).getT(1).getT(0);                                        // LfoNew_impl::chain21_t<NV>
		auto& branch = this->getT(0).getT(1).getT(0).getT(0);                                 // LfoNew_impl::branch_t<NV>
		auto& chain = this->getT(0).getT(1).getT(0).getT(0).getT(0);                          // LfoNew_impl::chain_t<NV>
		auto& gain10 = this->getT(0).getT(1).getT(0).getT(0).getT(0).getT(0);                 // core::gain<NV>
		auto& pi3 = this->getT(0).getT(1).getT(0).getT(0).getT(0).getT(1);                    // math::pi<NV>
		auto& chain1 = this->getT(0).getT(1).getT(0).getT(0).getT(1);                         // LfoNew_impl::chain1_t<NV>
		auto& gain13 = this->getT(0).getT(1).getT(0).getT(0).getT(1).getT(0);                 // core::gain<NV>
		auto& fmod13 = this->getT(0).getT(1).getT(0).getT(0).getT(1).getT(1);                 // math::fmod<NV>
		auto& chain2 = this->getT(0).getT(1).getT(0).getT(0).getT(2);                         // LfoNew_impl::chain2_t<NV>
		auto& oscillator = this->getT(0).getT(1).getT(0).getT(0).getT(2).getT(0);             // LfoNew_impl::oscillator_t<NV>
		auto& converter = this->getT(0).getT(1).getT(0).getT(0).getT(2).getT(1);              // LfoNew_impl::converter_t<NV>
		auto& sampleandhold = this->getT(0).getT(1).getT(0).getT(0).getT(2).getT(2);          // fx::sampleandhold<NV>
		auto& input_toggle = this->getT(0).getT(1).getT(0).getT(0).getT(2).getT(3);           // LfoNew_impl::input_toggle_t<NV>
		auto& expr1 = this->getT(0).getT(1).getT(0).getT(1);                                  // math::expr<NV, custom::expr1>
		auto& chain35 = this->getT(0).getT(1).getT(1);                                        // LfoNew_impl::chain35_t<NV>
		auto& branch3 = this->getT(0).getT(1).getT(1).getT(0);                                // LfoNew_impl::branch3_t<NV>
		auto& chain24 = this->getT(0).getT(1).getT(1).getT(0).getT(0);                        // LfoNew_impl::chain24_t<NV>
		auto& gain5 = this->getT(0).getT(1).getT(1).getT(0).getT(0).getT(0);                  // core::gain<NV>
		auto& fmod1 = this->getT(0).getT(1).getT(1).getT(0).getT(0).getT(1);                  // wrap::no_process<math::fmod<NV>>
		auto& pi4 = this->getT(0).getT(1).getT(1).getT(0).getT(0).getT(2);                    // math::pi<NV>
		auto& chain132 = this->getT(0).getT(1).getT(1).getT(0).getT(1);                       // LfoNew_impl::chain132_t<NV>
		auto& pi7 = this->getT(0).getT(1).getT(1).getT(0).getT(1).getT(0);                    // wrap::no_process<math::pi<NV>>
		auto& gain36 = this->getT(0).getT(1).getT(1).getT(0).getT(1).getT(1);                 // core::gain<NV>
		auto& fmod11 = this->getT(0).getT(1).getT(1).getT(0).getT(1).getT(2);                 // math::fmod<NV>
		auto& chain11 = this->getT(0).getT(1).getT(1).getT(0).getT(2);                        // LfoNew_impl::chain11_t<NV>
		auto& oscillator3 = this->getT(0).getT(1).getT(1).getT(0).getT(2).getT(0);            // LfoNew_impl::oscillator3_t<NV>
		auto& converter4 = this->getT(0).getT(1).getT(1).getT(0).getT(2).getT(1);             // LfoNew_impl::converter4_t<NV>
		auto& sampleandhold3 = this->getT(0).getT(1).getT(1).getT(0).getT(2).getT(2);         // fx::sampleandhold<NV>
		auto& input_toggle3 = this->getT(0).getT(1).getT(1).getT(0).getT(2).getT(3);          // control::input_toggle<NV, parameter::empty>
		auto& table11 = this->getT(0).getT(1).getT(1).getT(1);                                // LfoNew_impl::table11_t
		auto& chain36 = this->getT(0).getT(1).getT(2);                                        // LfoNew_impl::chain36_t<NV>
		auto& branch6 = this->getT(0).getT(1).getT(2).getT(0);                                // LfoNew_impl::branch6_t<NV>
		auto& chain37 = this->getT(0).getT(1).getT(2).getT(0).getT(0);                        // LfoNew_impl::chain37_t<NV>
		auto& gain6 = this->getT(0).getT(1).getT(2).getT(0).getT(0).getT(0);                  // core::gain<NV>
		auto& pi11 = this->getT(0).getT(1).getT(2).getT(0).getT(0).getT(1);                   // math::pi<NV>
		auto& chain133 = this->getT(0).getT(1).getT(2).getT(0).getT(1);                       // LfoNew_impl::chain133_t<NV>
		auto& pi12 = this->getT(0).getT(1).getT(2).getT(0).getT(1).getT(0);                   // wrap::no_process<math::pi<NV>>
		auto& gain37 = this->getT(0).getT(1).getT(2).getT(0).getT(1).getT(1);                 // core::gain<NV>
		auto& fmod12 = this->getT(0).getT(1).getT(2).getT(0).getT(1).getT(2);                 // math::fmod<NV>
		auto& chain12 = this->getT(0).getT(1).getT(2).getT(0).getT(2);                        // LfoNew_impl::chain12_t<NV>
		auto& oscillator1 = this->getT(0).getT(1).getT(2).getT(0).getT(2).getT(0);            // LfoNew_impl::oscillator1_t<NV>
		auto& chain38 = this->getT(0).getT(1).getT(3);                                        // LfoNew_impl::chain38_t<NV>
		auto& branch7 = this->getT(0).getT(1).getT(3).getT(0);                                // LfoNew_impl::branch7_t<NV>
		auto& chain39 = this->getT(0).getT(1).getT(3).getT(0).getT(0);                        // LfoNew_impl::chain39_t<NV>
		auto& gain7 = this->getT(0).getT(1).getT(3).getT(0).getT(0).getT(0);                  // core::gain<NV>
		auto& fmod4 = this->getT(0).getT(1).getT(3).getT(0).getT(0).getT(1);                  // wrap::no_process<math::fmod<NV>>
		auto& pi13 = this->getT(0).getT(1).getT(3).getT(0).getT(0).getT(2);                   // math::pi<NV>
		auto& rect6 = this->getT(0).getT(1).getT(3).getT(0).getT(0).getT(3);                  // math::rect<NV>
		auto& chain134 = this->getT(0).getT(1).getT(3).getT(0).getT(1);                       // LfoNew_impl::chain134_t<NV>
		auto& pi14 = this->getT(0).getT(1).getT(3).getT(0).getT(1).getT(0);                   // wrap::no_process<math::pi<NV>>
		auto& gain38 = this->getT(0).getT(1).getT(3).getT(0).getT(1).getT(1);                 // core::gain<NV>
		auto& fmod18 = this->getT(0).getT(1).getT(3).getT(0).getT(1).getT(2);                 // math::fmod<NV>
		auto& rect7 = this->getT(0).getT(1).getT(3).getT(0).getT(1).getT(3);                  // math::rect<NV>
		auto& chain13 = this->getT(0).getT(1).getT(3).getT(0).getT(2);                        // LfoNew_impl::chain13_t<NV>
		auto& oscillator2 = this->getT(0).getT(1).getT(3).getT(0).getT(2).getT(0);            // LfoNew_impl::oscillator2_t<NV>
		auto& rect8 = this->getT(0).getT(1).getT(3).getT(0).getT(2).getT(1);                  // math::rect<NV>
		auto& chain40 = this->getT(0).getT(1).getT(4);                                        // LfoNew_impl::chain40_t<NV>
		auto& branch8 = this->getT(0).getT(1).getT(4).getT(0);                                // LfoNew_impl::branch8_t<NV>
		auto& chain41 = this->getT(0).getT(1).getT(4).getT(0).getT(0);                        // LfoNew_impl::chain41_t<NV>
		auto& gain8 = this->getT(0).getT(1).getT(4).getT(0).getT(0).getT(0);                  // core::gain<NV>
		auto& fmod6 = this->getT(0).getT(1).getT(4).getT(0).getT(0).getT(1);                  // wrap::no_process<math::fmod<NV>>
		auto& pi15 = this->getT(0).getT(1).getT(4).getT(0).getT(0).getT(2);                   // math::pi<NV>
		auto& table6 = this->getT(0).getT(1).getT(4).getT(0).getT(0).getT(3);                 // LfoNew_impl::table6_t
		auto& chain135 = this->getT(0).getT(1).getT(4).getT(0).getT(1);                       // LfoNew_impl::chain135_t<NV>
		auto& pi16 = this->getT(0).getT(1).getT(4).getT(0).getT(1).getT(0);                   // wrap::no_process<math::pi<NV>>
		auto& gain40 = this->getT(0).getT(1).getT(4).getT(0).getT(1).getT(1);                 // core::gain<NV>
		auto& fmod19 = this->getT(0).getT(1).getT(4).getT(0).getT(1).getT(2);                 // math::fmod<NV>
		auto& table10 = this->getT(0).getT(1).getT(4).getT(0).getT(1).getT(3);                // LfoNew_impl::table10_t
		auto& chain14 = this->getT(0).getT(1).getT(4).getT(0).getT(2);                        // LfoNew_impl::chain14_t<NV>
		auto& chain15 = this->getT(0).getT(1).getT(4).getT(0).getT(2).getT(0);                // LfoNew_impl::chain15_t<NV>
		auto& oscillator5 = this->getT(0).getT(1).getT(4).getT(0).getT(2).getT(0).getT(0);    // LfoNew_impl::oscillator5_t<NV>
		auto& converter6 = this->getT(0).getT(1).getT(4).getT(0).getT(2).getT(0).getT(1);     // LfoNew_impl::converter6_t<NV>
		auto& sampleandhold5 = this->getT(0).getT(1).getT(4).getT(0).getT(2).getT(0).getT(2); // fx::sampleandhold<NV>
		auto& input_toggle5 = this->getT(0).getT(1).getT(4).getT(0).getT(2).getT(0).getT(3);  // control::input_toggle<NV, parameter::empty>
		auto& smoother = this->getT(0).getT(1).getT(4).getT(0).getT(2).getT(0).getT(4);       // core::smoother<NV>
		auto& table13 = this->getT(0).getT(1).getT(4).getT(0).getT(2).getT(0).getT(5);        // LfoNew_impl::table13_t
		auto& chain42 = this->getT(0).getT(1).getT(5);                                        // LfoNew_impl::chain42_t<NV>
		auto& branch9 = this->getT(0).getT(1).getT(5).getT(0);                                // LfoNew_impl::branch9_t<NV>
		auto& chain43 = this->getT(0).getT(1).getT(5).getT(0).getT(0);                        // LfoNew_impl::chain43_t<NV>
		auto& gain9 = this->getT(0).getT(1).getT(5).getT(0).getT(0).getT(0);                  // core::gain<NV>
		auto& fmod8 = this->getT(0).getT(1).getT(5).getT(0).getT(0).getT(1);                  // wrap::no_process<math::fmod<NV>>
		auto& pi17 = this->getT(0).getT(1).getT(5).getT(0).getT(0).getT(2);                   // math::pi<NV>
		auto& table14 = this->getT(0).getT(1).getT(5).getT(0).getT(0).getT(3);                // LfoNew_impl::table14_t
		auto& chain136 = this->getT(0).getT(1).getT(5).getT(0).getT(1);                       // LfoNew_impl::chain136_t<NV>
		auto& pi18 = this->getT(0).getT(1).getT(5).getT(0).getT(1).getT(0);                   // wrap::no_process<math::pi<NV>>
		auto& gain41 = this->getT(0).getT(1).getT(5).getT(0).getT(1).getT(1);                 // core::gain<NV>
		auto& fmod20 = this->getT(0).getT(1).getT(5).getT(0).getT(1).getT(2);                 // math::fmod<NV>
		auto& table15 = this->getT(0).getT(1).getT(5).getT(0).getT(1).getT(3);                // LfoNew_impl::table15_t
		auto& chain16 = this->getT(0).getT(1).getT(5).getT(0).getT(2);                        // LfoNew_impl::chain16_t<NV>
		auto& chain17 = this->getT(0).getT(1).getT(5).getT(0).getT(2).getT(0);                // LfoNew_impl::chain17_t<NV>
		auto& oscillator4 = this->getT(0).getT(1).getT(5).getT(0).getT(2).getT(0).getT(0);    // LfoNew_impl::oscillator4_t<NV>
		auto& one_pole = this->getT(0).getT(1).getT(5).getT(0).getT(2).getT(0).getT(1);       // filters::one_pole<NV>
		auto& table16 = this->getT(0).getT(1).getT(5).getT(0).getT(2).getT(0).getT(2);        // LfoNew_impl::table16_t
		auto& peak = this->getT(1);                                                           // LfoNew_impl::peak_t
		
		// Parameter Connections -------------------------------------------------------------------
		
		this->getParameterT(0).connectT(0, tempo_sync2); // Tempo -> tempo_sync2::Tempo
		
		this->getParameterT(1).connectT(0, tempo_sync2); // Divide -> tempo_sync2::Multiplier
		
		this->getParameterT(2).connectT(0, branch4); // Shape -> branch4::Index
		
		auto& Adjust_p = this->getParameterT(3);
		Adjust_p.connectT(0, gain10);       // Adjust -> gain10::Gain
		Adjust_p.connectT(1, gain13);       // Adjust -> gain13::Gain
		Adjust_p.connectT(2, input_toggle); // Adjust -> input_toggle::Value2
		Adjust_p.connectT(3, gain5);        // Adjust -> gain5::Gain
		Adjust_p.connectT(4, gain36);       // Adjust -> gain36::Gain
		Adjust_p.connectT(5, oscillator3);  // Adjust -> oscillator3::Gain
		Adjust_p.connectT(6, gain6);        // Adjust -> gain6::Gain
		Adjust_p.connectT(7, gain37);       // Adjust -> gain37::Gain
		Adjust_p.connectT(8, gain7);        // Adjust -> gain7::Gain
		Adjust_p.connectT(9, gain38);       // Adjust -> gain38::Gain
		Adjust_p.connectT(10, gain8);       // Adjust -> gain8::Gain
		Adjust_p.connectT(11, gain40);      // Adjust -> gain40::Gain
		Adjust_p.connectT(12, smoother);    // Adjust -> smoother::SmoothingTime
		Adjust_p.connectT(13, gain9);       // Adjust -> gain9::Gain
		Adjust_p.connectT(14, gain41);      // Adjust -> gain41::Gain
		Adjust_p.connectT(15, oscillator1); // Adjust -> oscillator1::Gain
		Adjust_p.connectT(16, oscillator2); // Adjust -> oscillator2::Gain
		Adjust_p.connectT(17, one_pole);    // Adjust -> one_pole::Frequency
		
		auto& AdjMode_p = this->getParameterT(4);
		AdjMode_p.connectT(0, branch);  // AdjMode -> branch::Index
		AdjMode_p.connectT(1, branch3); // AdjMode -> branch3::Index
		AdjMode_p.connectT(2, branch6); // AdjMode -> branch6::Index
		AdjMode_p.connectT(3, branch7); // AdjMode -> branch7::Index
		AdjMode_p.connectT(4, branch8); // AdjMode -> branch8::Index
		AdjMode_p.connectT(5, branch9); // AdjMode -> branch9::Index
		
		// Modulation Connections ------------------------------------------------------------------
		
		converter.getWrappedObject().getParameter().connectT(0, sampleandhold);   // converter -> sampleandhold::Counter
		converter4.getWrappedObject().getParameter().connectT(0, sampleandhold3); // converter4 -> sampleandhold3::Counter
		converter6.getWrappedObject().getParameter().connectT(0, sampleandhold5); // converter6 -> sampleandhold5::Counter
		tempo_sync2.getParameter().connectT(0, converter);                        // tempo_sync2 -> converter::Value
		tempo_sync2.getParameter().connectT(1, ramp);                             // tempo_sync2 -> ramp::PeriodTime
		tempo_sync2.getParameter().connectT(2, converter4);                       // tempo_sync2 -> converter4::Value
		tempo_sync2.getParameter().connectT(3, converter6);                       // tempo_sync2 -> converter6::Value
		input_toggle.getWrappedObject().getParameter().connectT(0, expr1);        // input_toggle -> expr1::Value
		
		// Default Values --------------------------------------------------------------------------
		
		;                                    // tempo_sync2::Tempo is automated
		;                                    // tempo_sync2::Multiplier is automated
		tempo_sync2.setParameterT(2, 1.);    // control::tempo_sync::Enabled
		tempo_sync2.setParameterT(3, 1000.); // control::tempo_sync::UnsyncedTime
		
		;                          // ramp::PeriodTime is automated
		ramp.setParameterT(1, 0.); // core::ramp::LoopStart
		ramp.setParameterT(2, 1.); // core::ramp::Gate
		
		; // branch4::Index is automated
		
		; // branch::Index is automated
		
		;                               // gain10::Gain is automated
		gain10.setParameterT(1, 232.9); // core::gain::Smoothing
		gain10.setParameterT(2, -100.); // core::gain::ResetValue
		
		pi3.setParameterT(0, 0.650239); // math::pi::Value
		
		;                               // gain13::Gain is automated
		gain13.setParameterT(1, 232.9); // core::gain::Smoothing
		gain13.setParameterT(2, -100.); // core::gain::ResetValue
		
		fmod13.setParameterT(0, 1.); // math::fmod::Value
		
		oscillator.setParameterT(0, 4.);   // core::oscillator::Mode
		oscillator.setParameterT(1, 81.2); // core::oscillator::Frequency
		oscillator.setParameterT(2, 1.);   // core::oscillator::FreqRatio
		oscillator.setParameterT(3, 1.);   // core::oscillator::Gate
		oscillator.setParameterT(4, 0.);   // core::oscillator::Phase
		oscillator.setParameterT(5, 1.);   // core::oscillator::Gain
		
		; // converter::Value is automated
		
		; // sampleandhold::Counter is automated
		
		input_toggle.setParameterT(0, 1.); // control::input_toggle::Input
		input_toggle.setParameterT(1, 1.); // control::input_toggle::Value1
		;                                  // input_toggle::Value2 is automated
		
		; // expr1::Value is automated
		
		; // branch3::Index is automated
		
		;                              // gain5::Gain is automated
		gain5.setParameterT(1, 107.2); // core::gain::Smoothing
		gain5.setParameterT(2, 0.);    // core::gain::ResetValue
		
		fmod1.setParameterT(0, 1.); // math::fmod::Value
		
		pi4.setParameterT(0, 0.32); // math::pi::Value
		
		pi7.setParameterT(0, 0.648856); // math::pi::Value
		
		;                               // gain36::Gain is automated
		gain36.setParameterT(1, 107.2); // core::gain::Smoothing
		gain36.setParameterT(2, 0.);    // core::gain::ResetValue
		
		fmod11.setParameterT(0, 1.); // math::fmod::Value
		
		oscillator3.setParameterT(0, 4.);   // core::oscillator::Mode
		oscillator3.setParameterT(1, 81.2); // core::oscillator::Frequency
		oscillator3.setParameterT(2, 1.);   // core::oscillator::FreqRatio
		oscillator3.setParameterT(3, 1.);   // core::oscillator::Gate
		oscillator3.setParameterT(4, 0.);   // core::oscillator::Phase
		;                                   // oscillator3::Gain is automated
		
		; // converter4::Value is automated
		
		; // sampleandhold3::Counter is automated
		
		input_toggle3.setParameterT(0, 1.);   // control::input_toggle::Input
		input_toggle3.setParameterT(1, 1.);   // control::input_toggle::Value1
		input_toggle3.setParameterT(2, 18.9); // control::input_toggle::Value2
		
		; // branch6::Index is automated
		
		;                              // gain6::Gain is automated
		gain6.setParameterT(1, 107.2); // core::gain::Smoothing
		gain6.setParameterT(2, 0.);    // core::gain::ResetValue
		
		pi11.setParameterT(0, 0.32); // math::pi::Value
		
		pi12.setParameterT(0, 0.648856); // math::pi::Value
		
		;                               // gain37::Gain is automated
		gain37.setParameterT(1, 107.2); // core::gain::Smoothing
		gain37.setParameterT(2, 0.);    // core::gain::ResetValue
		
		fmod12.setParameterT(0, 1.); // math::fmod::Value
		
		oscillator1.setParameterT(0, 4.);   // core::oscillator::Mode
		oscillator1.setParameterT(1, 81.2); // core::oscillator::Frequency
		oscillator1.setParameterT(2, 1.);   // core::oscillator::FreqRatio
		oscillator1.setParameterT(3, 1.);   // core::oscillator::Gate
		oscillator1.setParameterT(4, 0.);   // core::oscillator::Phase
		;                                   // oscillator1::Gain is automated
		
		; // branch7::Index is automated
		
		;                              // gain7::Gain is automated
		gain7.setParameterT(1, 107.2); // core::gain::Smoothing
		gain7.setParameterT(2, 0.);    // core::gain::ResetValue
		
		fmod4.setParameterT(0, 1.); // math::fmod::Value
		
		pi13.setParameterT(0, 0.32); // math::pi::Value
		
		rect6.setParameterT(0, 1.); // math::rect::Value
		
		pi14.setParameterT(0, 0.648856); // math::pi::Value
		
		;                               // gain38::Gain is automated
		gain38.setParameterT(1, 107.2); // core::gain::Smoothing
		gain38.setParameterT(2, 0.);    // core::gain::ResetValue
		
		fmod18.setParameterT(0, 1.); // math::fmod::Value
		
		rect7.setParameterT(0, 1.); // math::rect::Value
		
		oscillator2.setParameterT(0, 4.);   // core::oscillator::Mode
		oscillator2.setParameterT(1, 81.2); // core::oscillator::Frequency
		oscillator2.setParameterT(2, 1.);   // core::oscillator::FreqRatio
		oscillator2.setParameterT(3, 1.);   // core::oscillator::Gate
		oscillator2.setParameterT(4, 0.);   // core::oscillator::Phase
		;                                   // oscillator2::Gain is automated
		
		rect8.setParameterT(0, 1.); // math::rect::Value
		
		; // branch8::Index is automated
		
		;                              // gain8::Gain is automated
		gain8.setParameterT(1, 107.2); // core::gain::Smoothing
		gain8.setParameterT(2, 0.);    // core::gain::ResetValue
		
		fmod6.setParameterT(0, 1.); // math::fmod::Value
		
		pi15.setParameterT(0, 0.32); // math::pi::Value
		
		pi16.setParameterT(0, 0.648856); // math::pi::Value
		
		;                               // gain40::Gain is automated
		gain40.setParameterT(1, 107.2); // core::gain::Smoothing
		gain40.setParameterT(2, 0.);    // core::gain::ResetValue
		
		fmod19.setParameterT(0, 1.); // math::fmod::Value
		
		oscillator5.setParameterT(0, 4.);   // core::oscillator::Mode
		oscillator5.setParameterT(1, 81.2); // core::oscillator::Frequency
		oscillator5.setParameterT(2, 1.);   // core::oscillator::FreqRatio
		oscillator5.setParameterT(3, 1.);   // core::oscillator::Gate
		oscillator5.setParameterT(4, 0.);   // core::oscillator::Phase
		oscillator5.setParameterT(5, 1.);   // core::oscillator::Gain
		
		; // converter6::Value is automated
		
		; // sampleandhold5::Counter is automated
		
		input_toggle5.setParameterT(0, 1.);   // control::input_toggle::Input
		input_toggle5.setParameterT(1, 1.);   // control::input_toggle::Value1
		input_toggle5.setParameterT(2, 18.9); // control::input_toggle::Value2
		
		;                              // smoother::SmoothingTime is automated
		smoother.setParameterT(1, 0.); // core::smoother::DefaultValue
		
		; // branch9::Index is automated
		
		;                              // gain9::Gain is automated
		gain9.setParameterT(1, 107.2); // core::gain::Smoothing
		gain9.setParameterT(2, 0.);    // core::gain::ResetValue
		
		fmod8.setParameterT(0, 1.); // math::fmod::Value
		
		pi17.setParameterT(0, 0.32); // math::pi::Value
		
		pi18.setParameterT(0, 0.648856); // math::pi::Value
		
		;                               // gain41::Gain is automated
		gain41.setParameterT(1, 107.2); // core::gain::Smoothing
		gain41.setParameterT(2, 0.);    // core::gain::ResetValue
		
		fmod20.setParameterT(0, 1.); // math::fmod::Value
		
		oscillator4.setParameterT(0, 4.);   // core::oscillator::Mode
		oscillator4.setParameterT(1, 81.2); // core::oscillator::Frequency
		oscillator4.setParameterT(2, 1.);   // core::oscillator::FreqRatio
		oscillator4.setParameterT(3, 1.);   // core::oscillator::Gate
		oscillator4.setParameterT(4, 0.);   // core::oscillator::Phase
		oscillator4.setParameterT(5, 1.);   // core::oscillator::Gain
		
		;                                // one_pole::Frequency is automated
		one_pole.setParameterT(1, 1.);   // filters::one_pole::Q
		one_pole.setParameterT(2, 0.);   // filters::one_pole::Gain
		one_pole.setParameterT(3, 0.01); // filters::one_pole::Smoothing
		one_pole.setParameterT(4, 0.);   // filters::one_pole::Mode
		one_pole.setParameterT(5, 1.);   // filters::one_pole::Enabled
		
		this->setParameterT(0, 8.);
		this->setParameterT(1, 1.);
		this->setParameterT(2, 1.);
		this->setParameterT(3, 0.48524);
		this->setParameterT(4, 3.);
		this->setExternalData({}, -1);
	}
	~instance() override
	{
		// Cleanup external data references --------------------------------------------------------
		
		this->setExternalData({}, -1);
	}
	
	static constexpr bool isPolyphonic() { return NV > 1; };
	
	static constexpr bool isProcessingHiseEvent() { return true; };
	
	static constexpr bool hasTail() { return true; };
	
	static constexpr bool isSuspendedOnSilence() { return false; };
	
	void setExternalData(const ExternalData& b, int index)
	{
		// External Data Connections ---------------------------------------------------------------
		
		this->getT(0).getT(0).getT(1).setExternalData(b, index);                                 // LfoNew_impl::ramp_t<NV>
		this->getT(0).getT(1).getT(0).getT(0).getT(2).getT(0).setExternalData(b, index);         // LfoNew_impl::oscillator_t<NV>
		this->getT(0).getT(1).getT(1).getT(0).getT(2).getT(0).setExternalData(b, index);         // LfoNew_impl::oscillator3_t<NV>
		this->getT(0).getT(1).getT(1).getT(1).setExternalData(b, index);                         // LfoNew_impl::table11_t
		this->getT(0).getT(1).getT(2).getT(0).getT(2).getT(0).setExternalData(b, index);         // LfoNew_impl::oscillator1_t<NV>
		this->getT(0).getT(1).getT(3).getT(0).getT(2).getT(0).setExternalData(b, index);         // LfoNew_impl::oscillator2_t<NV>
		this->getT(0).getT(1).getT(4).getT(0).getT(0).getT(3).setExternalData(b, index);         // LfoNew_impl::table6_t
		this->getT(0).getT(1).getT(4).getT(0).getT(1).getT(3).setExternalData(b, index);         // LfoNew_impl::table10_t
		this->getT(0).getT(1).getT(4).getT(0).getT(2).getT(0).getT(0).setExternalData(b, index); // LfoNew_impl::oscillator5_t<NV>
		this->getT(0).getT(1).getT(4).getT(0).getT(2).getT(0).getT(5).setExternalData(b, index); // LfoNew_impl::table13_t
		this->getT(0).getT(1).getT(5).getT(0).getT(0).getT(3).setExternalData(b, index);         // LfoNew_impl::table14_t
		this->getT(0).getT(1).getT(5).getT(0).getT(1).getT(3).setExternalData(b, index);         // LfoNew_impl::table15_t
		this->getT(0).getT(1).getT(5).getT(0).getT(2).getT(0).getT(0).setExternalData(b, index); // LfoNew_impl::oscillator4_t<NV>
		this->getT(0).getT(1).getT(5).getT(0).getT(2).getT(0).getT(2).setExternalData(b, index); // LfoNew_impl::table16_t
		this->getT(1).setExternalData(b, index);                                                 // LfoNew_impl::peak_t
	}
};
}

#undef getT
#undef connectT
#undef setParameterT
#undef setParameterWT
#undef getParameterT
// ======================================| Public Definition |======================================

namespace project
{
// polyphonic template declaration

template <int NV>
using LfoNew = wrap::node<LfoNew_impl::instance<NV>>;
}


